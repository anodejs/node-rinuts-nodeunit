//jslint igonres
/*globals module, console, require */

var reporter = require('./singleTestReporter');

// 
// private methods:

//
// enumarates a group of tests by recursivly flatenning the tree-like structure which nodeunit tests posses,
// test names are prefixed by their containing group followed by an '.'
// returns an array tests after applying the formatter on each of them
var mapTestTree = function (group, formatter, namePrefix) {
    var tests = [],
        key,
        test,
        testName;

    function addTest(test) {
        tests.push(test);
    }

    for (key in group) {
        if (group.hasOwnProperty(key)) {
            if (typeof group[key] === 'function') {
                testName = namePrefix ? namePrefix + key : key;
                test = formatter(group[key], testName);
                addTest(test);
            } else { // else key is a group of tests
                mapTestTree(group[key], formatter, (namePrefix ? (namePrefix + key + '.') : (key + '.'))).forEach(addTest);
            }
        }
    }

    console.log('tests in mapTestTree are : ' + tests);
    return tests;
};

//
//
var loadModule = function (moduleName, callback) {
    var module,
        tests = [];
    console.log('in load module');
    try {
        module = require(moduleName);
        console.log('module is ' + module);
        tests = mapTestTree(module, function (test, testName) {
            return {
                testName: testName,
                containerName: moduleName,
                metadata: test
            };
        });
    } catch (e) {
        console.error('Could not load test module at - \"' + moduleName + ' \"');        
    }

    callback(tests);
};

var nodeunitDriver = function (moduleNames) {
    this.init(moduleNames);
};

// expose nodeunitDriver
module.exports = nodeunitDriver;

nodeunitDriver.prototype = {
    //
    // A dictionary of test names and their data.
    // each test has the following form: 
    // {
    //     testName:   *THE NAME OF THE TEST*
    //     containerName: *THE TEST CONTAINER NAME* 
    //     metaData: *DATA REQUIRED IN ORDER TO RUN THE TEST*
    // }
    tests: {},

    //
    // Loads every node module appearing in moduleNames from the tests dir, into tests
    // modulePaths {Array}: an array of paths to nodeunit modules
    init: function (modulePaths) {
        var self = this;

        modulePaths.forEach(function (moduleName) {
            loadModule(moduleName, function (tests) {
                tests.forEach(function (test) {
                    self.tests[test.testName] = test;
                    console.log('adding test');
                });
            });
        });
        console.log('loaded nodeunit test modules');
        console.log(this.tests);
    },

    //
    // This method runs a test *testName* and calls the callback on the 
    // test result. The callback on the test result upon completion.    
    // testName {string}: The name of the test. must be a name generated by enumTests method
    // context {object}: Test context. Attached to each nodeunit test's 'test' parameter
    // callback {function}: A call back function called upon test completion and receiving the test
    //           result as it's first argument
    runTest: function (testName, callback, context) {
        var test = this.tests[testName],
            testMethod,
            previousTestMethod;

        if (!test || !test.metadata) {
            callback('Failed to run test :"' + testName + '". Not on service');
        }

        testMethod = test.metadata;

        // add context if available        
        if (context) {
            previousTestMethod = testMethod;
            testMethod = function (test) {
                test.context = context;
                previousTestMethod(test);
            };
        }

        reporter.run(testName, testMethod, callback);
    },

    //
    // applies *callback* on an array containing the tests names from testSuite.
    // assuming testSuite's functions are nodeunit style tests    
    // callback {function}: A callback receiving the test names enumaration (array) as its second argument. 
    enumTests: function (callback) {
        var testNames = [],
            key;
        for (key in this.tests) {
            if (this.tests.hasOwnProperty(key)) {
                testNames.push(this.tests[key].testName);
            }
        }

        callback(null, testNames);
    }
};
